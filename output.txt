Script started on 2021-04-01 17:07:14+02:00 [TERM="xterm-256color" TTY="/dev/tty1" COLUMNS="172" LINES="46"]
]0;francescopont@DESKTOP-6MBR7RP: /mnt/c/Users/ponti/Github/POMC[01;32mfrancescopont@DESKTOP-6MBR7RP[00m:[01;34m/mnt/c/Users/ponti/Github/POMC[00m$ exitstack test
[0mpomc-0.1.0.0: unregistering (local file changes: src/Pomc/SCCAlgorithm.hs)[0m
Progress 0/2            [0mpomc> configure (lib + exe + test)[0m
Progress 0/2            [0mConfiguring pomc-0.1.0.0...[0m
Progress 0/2            [0mpomc> build (lib + exe + test)[0m
Progress 0/2            [0mPreprocessing library for pomc-0.1.0.0..[0m
Progress 0/2            [0mBuilding library for pomc-0.1.0.0..[0m
Progress 0/2            [0m[14 of 19] Compiling Pomc.SCCAlgorithm[0m
Progress 0/2            [0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:93:50: [;1m[31merror:[0m[0m[;1m[0m[0m[;1m[0m
Progress 0/2            [0m    parse error on input â€˜$â€™[0m
Progress 0/2            [0m    Perhaps you intended to use TemplateHaskell[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m93 |[0m[0m   show gn@SCComponent{} = (show $ getgnId gn) ++ [;1m[31m$[0m[0m concatMap show $ nodes gn  [0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[31m                                                  ^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            Progress 1/2
[0m
--  While building package pomc-0.1.0.0 (scroll up to its section to see the error) using:
      /home/francescopont/.stack/setup-exe-cache/x86_64-linux-tinfo6/Cabal-simple_mPHDZzAJ_3.0.1.0_ghc-8.8.4 --builddir=.stack-work/dist/x86_64-linux-tinfo6/Cabal-3.0.1.0 build lib:pomc exe:pomc test:test-pomc --ghc-options " -fdiagnostics-color=always"
    Process exited with code: ExitFailure 1[0m
]0;francescopont@DESKTOP-6MBR7RP: /mnt/c/Users/ponti/Github/POMC[01;32mfrancescopont@DESKTOP-6MBR7RP[00m:[01;34m/mnt/c/Users/ponti/Github/POMC[00m$ stack test
Progress 0/2            [0mpomc> configure (lib + exe + test)[0m
Progress 0/2            [0mConfiguring pomc-0.1.0.0...[0m
Progress 0/2            [0mpomc> build (lib + exe + test)[0m
Progress 0/2            [0mPreprocessing library for pomc-0.1.0.0..[0m
Progress 0/2            [0mBuilding library for pomc-0.1.0.0..[0m
Progress 0/2            [0m[14 of 19] Compiling Pomc.SCCAlgorithm[0m
Progress 0/2            [0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:27:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The import of â€˜Deltaâ€™ from module â€˜Pomc.SatUtilsâ€™ is redundant[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m27 |[0m[0m [;1m[35mimport Pomc.SatUtils( StateId(..), Stack, SatState, Delta, debug)[0m[0m [0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:30:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The import of â€˜mapMâ€™ from module â€˜Control.Monadâ€™ is redundant[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m30 |[0m[0m [;1m[35mimport Control.Monad ( forM_, forM,foldM, mapM)[0m[0m [0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:31:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The import of â€˜Control.Monad.STâ€™ is redundant[0m
Progress 0/2            [0m      except perhaps to import instances from â€˜Control.Monad.STâ€™[0m
Progress 0/2            [0m    To import instances alone, use: import Control.Monad.ST()[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m31 |[0m[0m [;1m[35mimport Control.Monad.ST[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:33:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The import of â€˜writeSTRefâ€™ from module â€˜Data.STRefâ€™ is redundant[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m33 |[0m[0m [;1m[35mimport Data.STRef (STRef, newSTRef, readSTRef, writeSTRef, modifySTRef')[0m[0m [0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:46:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The qualified import of â€˜Data.Vector.Mutableâ€™ is redundant[0m
Progress 0/2            [0m      except perhaps to import instances from â€˜Data.Vector.Mutableâ€™[0m
Progress 0/2            [0m    To import instances alone, use: import Data.Vector.Mutable()[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m46 |[0m[0m [;1m[35mimport qualified Data.Vector.Mutable as MV[0m[0m [0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:49:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The import of â€˜Data.Listâ€™ is redundant[0m
Progress 0/2            [0m      except perhaps to import instances from â€˜Data.Listâ€™[0m
Progress 0/2            [0m    To import instances alone, use: import Data.List()[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m49 |[0m[0m [;1m[35mimport Data.List[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:139:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-top-binds[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    Defined but not used: â€˜containsTSâ€™[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m139 |[0m[0m [;1m[35mcontainsTS[0m[0m tsref val = do[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m ^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:151:4: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-matches[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    Defined but not used: â€˜s1â€™[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m151 |[0m[0m   ([;1m[35ms1[0m[0m,s2) <- readSTRef tsref[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m    ^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:210:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-top-binds[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    Defined but not used: â€˜keysDHTâ€™[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m210 |[0m[0m [;1m[35mkeysDHT[0m[0m (ht1, _) = do [0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m ^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:220:12: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜idSeqâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:114:5[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m220 |[0m[0m freshPosId [;1m[35midSeq[0m[0m = do[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m            ^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:226:12: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜idSeqâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:114:5[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m226 |[0m[0m freshNegId [;1m[35midSeq[0m[0m = do[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m            ^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:242:59: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜nodeâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:88:5[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m242 |[0m[0m                          in not $ Set.null $ Set.filter (\[;1m[35mnode[0m[0m -> fst node == sid) gnn -- TODO: maybe an alternative implementation performs better?[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                                                           ^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:267:18: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜nodeâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:88:5[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m267 |[0m[0m selfLoop edgeref [;1m[35mnode[0m[0m = do[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                  ^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:278:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wincomplete-patterns[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    Pattern match(es) are non-exhaustive[0m
Progress 0/2            [0m    In an equation for â€˜toEdgesâ€™: Patterns not matched: _ _ [][0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m278 |[0m[0m [;1m[35mtoEdges edgeref acc [x] = return acc[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^...[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:278:9: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-matches[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    Defined but not used: â€˜edgerefâ€™[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m278 |[0m[0m toEdges [;1m[35medgeref[0m[0m acc [x] = return acc[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m         ^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:278:22: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-matches[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    Defined but not used: â€˜xâ€™[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m278 |[0m[0m toEdges edgeref acc [[;1m[35mx[0m[0m] = return acc[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                      ^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:304:10: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜initialsâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:120:5[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m304 |[0m[0m newGraph [;1m[35minitials[0m[0m = do[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m          ^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:350:11: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜identâ€™ shadows the existing binding[0m
Progress 0/2            [0m      bound at src/Pomc/SCCAlgorithm.hs:344:3[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m350 |[0m[0m           [;1m[35mident[0m[0m <- freshPosId $ idSeq graph[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m           ^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:374:18: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜iValueâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:83:5[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m374 |[0m[0m updateSCC' graph [;1m[35miValue[0m[0m =  do [0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                  ^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:380:7: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-do-bind[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    A do-notation statement discarded a result of type â€˜Maybe Intâ€™[0m
Progress 0/2            [0m    Suppress this warning by saying[0m
Progress 0/2            [0m      â€˜_ <- StackST.stackPop (bStack graph)â€™[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m380 |[0m[0m       [;1m[35mStackST.stackPop (bStack graph)[0m[0m;[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:401:27: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜fromâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:52:5[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m401 |[0m[0m discoverSummaryBody graph [;1m[35mfrom[0m[0m    = let untilcond = \ident -> do [0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                           ^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:405:41: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜bodyâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:57:6[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m405 |[0m[0m                                         [;1m[35mbody[0m[0m <- allUntil (sStack graph) [] untilcond[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                                         ^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:411:23: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜fromâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:52:5[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m411 |[0m[0m discoverSummary graph [;1m[35mfrom[0m[0m body to = do [0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                       ^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:411:28: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜bodyâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:57:6[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m411 |[0m[0m discoverSummary graph from [;1m[35mbody[0m[0m to = do [0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                            ^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:411:33: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜toâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:53:6[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m411 |[0m[0m discoverSummary graph from body [;1m[35mto[0m[0m = do [0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                                 ^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:417:22: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜fromâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:52:5[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m417 |[0m[0m insertInternal graph [;1m[35mfrom[0m[0m to = do from <- lookupIdDHT (nodeToGraphNode graph) from[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                      ^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:417:27: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜toâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:53:6[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m417 |[0m[0m insertInternal graph from [;1m[35mto[0m[0m = do from <- lookupIdDHT (nodeToGraphNode graph) from[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                           ^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:417:35: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜fromâ€™ shadows the existing binding[0m
Progress 0/2            [0m      bound at src/Pomc/SCCAlgorithm.hs:417:22[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m417 |[0m[0m insertInternal graph from to = do [;1m[35mfrom[0m[0m <- lookupIdDHT (nodeToGraphNode graph) from[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                                   ^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:418:35: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜toâ€™ shadows the existing binding[0m
Progress 0/2            [0m      bound at src/Pomc/SCCAlgorithm.hs:417:27[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m418 |[0m[0m                                   [;1m[35mto[0m[0m   <- lookupIdDHT (nodeToGraphNode graph) to[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                                   ^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:442:7: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-do-bind[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    A do-notation statement discarded a result of type â€˜Maybe Intâ€™[0m
Progress 0/2            [0m    Suppress this warning by saying[0m
Progress 0/2            [0m      â€˜_ <- StackST.stackPop (bStack graph)â€™[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m442 |[0m[0m       [;1m[35mStackST.stackPop (bStack graph)[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:450:23: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜iValueâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:83:5[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m450 |[0m[0m mergeComponents graph [;1m[35miValue[0m[0m  acc areFinal = do[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                       ^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:457:7: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜elemâ€™ shadows the existing binding[0m
Progress 0/2            [0m      imported from â€˜Data.Listâ€™ at src/Pomc/SCCAlgorithm.hs:49:1-16[0m
Progress 0/2            [0m      (and originally defined in â€˜Data.Foldableâ€™)[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m457 |[0m[0m       [;1m[35melem[0m[0m <- StackST.stackPop (sStack graph)[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m       ^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:481:61: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜fromâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:52:5[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m481 |[0m[0m                                     couples = [(from, to) | [;1m[35mfrom[0m[0m <- gnListIds, to <- gnListIds] [0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                                                             ^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:481:80: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜toâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:53:6[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m481 |[0m[0m                                     couples = [(from, to) | from <- gnListIds, [;1m[35mto[0m[0m <- gnListIds] [0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                                                                                ^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:483:66: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜fromâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:52:5[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m483 |[0m[0m                                   edgeSetList <- forM couples (\([;1m[35mfrom[0m[0m,to) -> lookupEdge (edges graph) from to)[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                                                                  ^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:483:71: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜toâ€™ shadows the existing binding[0m
Progress 0/2            [0m      defined at src/Pomc/SCCAlgorithm.hs:53:6[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m483 |[0m[0m                                   edgeSetList <- forM couples (\(from,[;1m[35mto[0m[0m) -> lookupEdge (edges graph) from to)[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                                                                       ^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:484:35: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜gnListâ€™ shadows the existing binding[0m
Progress 0/2            [0m      bound at src/Pomc/SCCAlgorithm.hs:479:37[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m484 |[0m[0m                                   [;1m[35mgnList[0m[0m <- forM (Set.toList . Set.unions . Set.map edgeGNodes . Set.unions $ edgeSetList) $ lookupIntDHT $ nodeToGraphNode graph[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                                   ^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/SCCAlgorithm.hs:527:27: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜gnâ€™ shadows the existing binding[0m
Progress 0/2            [0m      bound at src/Pomc/SCCAlgorithm.hs:523:32[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m527 |[0m[0m   success <-  foldM (\acc [;1m[35mgn[0m[0m -> if acc[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                           ^^[0m[0m[0m
Progress 0/2            [0m[15 of 19] Compiling Pomc.Satisfiability [Pomc.SCCAlgorithm changed][0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/Satisfiability.hs:17:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The import of â€˜EncPrecFuncâ€™ from module â€˜Pomc.Checkâ€™ is redundant[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m17 |[0m[0m [;1m[35mimport Pomc.Check ( EncPrecFunc, makeOpa)[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/Satisfiability.hs:18:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The import of â€˜Stateâ€™ from module â€˜Pomc.Stateâ€™ is redundant[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m18 |[0m[0m [;1m[35mimport Pomc.State(Input, State(..))[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/Satisfiability.hs:20:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The import of â€˜Pomc.Dataâ€™ is redundant[0m
Progress 0/2            [0m      except perhaps to import instances from â€˜Pomc.Dataâ€™[0m
Progress 0/2            [0m    To import instances alone, use: import Pomc.Data()[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m20 |[0m[0m [;1m[35mimport Pomc.Data (BitEncoding, extractInput)[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/Satisfiability.hs:27:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The import of â€˜modifySTRef', newSTRef, readSTRef, writeSTRefâ€™[0m
Progress 0/2            [0m    from module â€˜Data.STRefâ€™ is redundant[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m27 |[0m[0m [;1m[35mimport Data.STRef (STRef, newSTRef, readSTRef, writeSTRef, modifySTRef')[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/Satisfiability.hs:30:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The import of â€˜Data.Setâ€™ is redundant[0m
Progress 0/2            [0m      except perhaps to import instances from â€˜Data.Setâ€™[0m
Progress 0/2            [0m    To import instances alone, use: import Data.Set()[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m30 |[0m[0m [;1m[35mimport Data.Set (Set)[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/Satisfiability.hs:34:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The qualified import of â€˜Data.HashTable.ST.Basicâ€™ is redundant[0m
Progress 0/2            [0m      except perhaps to import instances from â€˜Data.HashTable.ST.Basicâ€™[0m
Progress 0/2            [0m    To import instances alone, use: import Data.HashTable.ST.Basic()[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m34 |[0m[0m [;1m[35mimport qualified Data.HashTable.ST.Basic as BH[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/Satisfiability.hs:35:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The qualified import of â€˜Data.HashTable.Classâ€™ is redundant[0m
Progress 0/2            [0m      except perhaps to import instances from â€˜Data.HashTable.Classâ€™[0m
Progress 0/2            [0m    To import instances alone, use: import Data.HashTable.Class()[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m35 |[0m[0m [;1m[35mimport qualified Data.HashTable.Class as H[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/Satisfiability.hs:37:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The qualified import of â€˜Data.Vector.Mutableâ€™ is redundant[0m
Progress 0/2            [0m      except perhaps to import instances from â€˜Data.Vector.Mutableâ€™[0m
Progress 0/2            [0m    To import instances alone, use: import Data.Vector.Mutable()[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m37 |[0m[0m [;1m[35mimport qualified Data.Vector.Mutable as MV[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/Satisfiability.hs:38:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The import of â€˜Data.Vectorâ€™ is redundant[0m
Progress 0/2            [0m      except perhaps to import instances from â€˜Data.Vectorâ€™[0m
Progress 0/2            [0m    To import instances alone, use: import Data.Vector()[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m38 |[0m[0m [;1m[35mimport Data.Vector (Vector)[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/Satisfiability.hs:65:3: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜alreadyVisitedâ€™ shadows the existing binding[0m
Progress 0/2            [0m      imported from â€˜Pomc.SCCAlgorithmâ€™ at src/Pomc/Satisfiability.hs:22:1-24[0m
Progress 0/2            [0m      (and originally defined at src/Pomc/SCCAlgorithm.hs:338:1-14)[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m65 |[0m[0m   [;1m[35malreadyVisited[0m[0m <- memberSM (visited globals) q g[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m   ^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/Satisfiability.hs:210:16: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wname-shadowing[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    This binding for â€˜initialNodesâ€™ shadows the existing binding[0m
Progress 0/2            [0m      imported from â€˜Pomc.SCCAlgorithmâ€™ at src/Pomc/Satisfiability.hs:22:1-24[0m
Progress 0/2            [0m      (and originally defined at src/Pomc/SCCAlgorithm.hs:330:1-12)[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m210 |[0m[0m                [;1m[35minitialNodes[0m[0m <- V.mapM (\sId -> return (sId, Nothing)) initialsId[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                ^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/Satisfiability.hs:349:15: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-matches[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    Defined but not used: â€˜areFinalâ€™[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m349 |[0m[0m reachOmegaPop [;1m[35mareFinal[0m[0m globals delta (q,g) qState =[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m               ^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/Satisfiability.hs:349:39: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-matches[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    Defined but not used: â€˜qâ€™[0m[0m[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[0m
Progress 0/2            [0m[;1m[34m349 |[0m[0m reachOmegaPop areFinal globals delta ([;1m[35mq[0m[0m,g) qState =[0m
Progress 0/2            [0m[;1m[34m    |[0m[0m[;1m[35m                                       ^[0m[0m[0m
Progress 0/2            [0m[16 of 19] Compiling Pomc.ModelChecker [Pomc.Satisfiability changed][0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/ModelChecker.hs:86:48: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-matches[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    Defined but not used: â€˜pâ€™[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m86 |[0m[0m       cIsFinalOmega states = (any (\(MCState q [;1m[35mp[0m[0m) -> Set.member q $ Set.fromList $ finals opa) states) &&[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m                                                ^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1msrc/Pomc/ModelChecker.hs:87:57: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-matches[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    Defined but not used: â€˜qâ€™[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m87 |[0m[0m                              (all (\f -> any (\(MCState [;1m[35mq[0m[0m p) -> phiIsFinal f p) states) $ Set.toList cl)[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m                                                         ^[0m[0m[0m
Progress 0/2            [0mPreprocessing executable 'pomc' for pomc-0.1.0.0..[0m
Progress 0/2            [0mBuilding executable 'pomc' for pomc-0.1.0.0..[0m
Progress 0/2            [0mLinking .stack-work/dist/x86_64-linux-tinfo6/Cabal-3.0.1.0/build/pomc/pomc ...[0m
Progress 0/2            [0mPreprocessing test suite 'test-pomc' for pomc-0.1.0.0..[0m
Progress 0/2            [0mBuilding test suite 'test-pomc' for pomc-0.1.0.0..[0m
Progress 0/2            [0m[5 of 7] Compiling TestSat [Pomc.Satisfiability changed][0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1mtest/TestSat.hs:8:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The import of â€˜Dirâ€™ from module â€˜Pomc.PotlV2â€™ is redundant[0m[0m[0m
Progress 0/2            [0m[;1m[34m  |[0m[0m[0m
Progress 0/2            [0m[;1m[34m8 |[0m[0m [;1m[35mimport Pomc.PotlV2 (Formula(..), Dir(..))[0m[0m[0m
Progress 0/2            [0m[;1m[34m  |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1mtest/TestSat.hs:10:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The import of â€˜EvalFormulasâ€™ is redundant[0m
Progress 0/2            [0m      except perhaps to import instances from â€˜EvalFormulasâ€™[0m
Progress 0/2            [0m    To import instances alone, use: import EvalFormulas()[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m10 |[0m[0m [;1m[35mimport EvalFormulas (ap)[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1mtest/TestSat.hs:20:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-top-binds[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    Defined but not used: â€˜evalTestsâ€™[0m[0m[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[0m
Progress 0/2            [0m[;1m[34m20 |[0m[0m [;1m[35mevalTests[0m[0m = testGroup "Sat Eval Tests" $ map makeV2TestCase EvalFormulas.formulas[0m
Progress 0/2            [0m[;1m[34m   |[0m[0m[;1m[35m ^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[7 of 7] Compiling Main [TestSat changed][0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1mtest/Test.hs:3:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The qualified import of â€˜TestOpaâ€™ is redundant[0m
Progress 0/2            [0m      except perhaps to import instances from â€˜TestOpaâ€™[0m
Progress 0/2            [0m    To import instances alone, use: import TestOpa()[0m[0m[0m
Progress 0/2            [0m[;1m[34m  |[0m[0m[0m
Progress 0/2            [0m[;1m[34m3 |[0m[0m [;1m[35mimport qualified TestOpa   (tests)[0m[0m[0m
Progress 0/2            [0m[;1m[34m  |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1mtest/Test.hs:4:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The qualified import of â€˜TestCheckâ€™ is redundant[0m
Progress 0/2            [0m      except perhaps to import instances from â€˜TestCheckâ€™[0m
Progress 0/2            [0m    To import instances alone, use: import TestCheck()[0m[0m[0m
Progress 0/2            [0m[;1m[34m  |[0m[0m[0m
Progress 0/2            [0m[;1m[34m4 |[0m[0m [;1m[35mimport qualified TestCheck (tests)[0m[0m[0m
Progress 0/2            [0m[;1m[34m  |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0m/mnt/c/Users/ponti/Github/POMC/[;1mtest/Test.hs:6:1: [;1m[35mwarning:[0m[0m[;1m [[;1m[35m-Wunused-imports[0m[0m[;1m][0m[0m[;1m[0m
Progress 0/2            [0m    The qualified import of â€˜TestMCâ€™ is redundant[0m
Progress 0/2            [0m      except perhaps to import instances from â€˜TestMCâ€™[0m
Progress 0/2            [0m    To import instances alone, use: import TestMC()[0m[0m[0m
Progress 0/2            [0m[;1m[34m  |[0m[0m[0m
Progress 0/2            [0m[;1m[34m6 |[0m[0m [;1m[35mimport qualified TestMC    (tests)[0m[0m[0m
Progress 0/2            [0m[;1m[34m  |[0m[0m[;1m[35m ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^[0m[0m[0m
Progress 0/2            [0mLinking .stack-work/dist/x86_64-linux-tinfo6/Cabal-3.0.1.0/build/test-pomc/test-pomc ...[0m
Progress 0/2            [0m[0m[0m[0m[0m
Progress 0/2            [0mpomc> copy/register[0m
Progress 0/2            [0mInstalling library in /mnt/c/Users/ponti/Github/POMC/.stack-work/install/x86_64-linux-tinfo6/85007b2e7300b1cb2e7901946034e105ed957cb11d537ef59da0e1bca3733848/8.8.4/lib/x86_64-linux-ghc-8.8.4/pomc-0.1.0.0-GpRZHhL7kihMMbv3EmWWD[0m
Progress 0/2            [0mInstalling executable pomc in /mnt/c/Users/ponti/Github/POMC/.stack-work/install/x86_64-linux-tinfo6/85007b2e7300b1cb2e7901946034e105ed957cb11d537ef59da0e1bca3733848/8.8.4/bin[0m
Progress 0/2            [0mRegistering library for pomc-0.1.0.0..[0m
Progress 0/2            Progress 1/2: pomc                  [0mpomc> test (suite: test-pomc)[0m
Progress 1/2: pomc                  [0m[0m
[?25lTests
  TestSat.hs Tests
    Sat Base Tests
      First Call ("call"): check for formula: 1

check for formula: 1

check for formula: 2

check for formula: 1

check for formula: #

check for formula: 1

looking for ident: 1

Call to visit node

New omega states found: 9


Inserting new single node: 2

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Nothing)} ---> to: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

check for formula: 1

check for formula: 1

check for formula: 2

check for formula: 2

check for formula: 1

check for formula: 2

check for formula: #

check for formula: #

check for formula: 2

check for formula: 1

check for formula: 2

check for formula: 1

creating component for node: 2
looking for ident: 2

SingleNode without Cycle found: 2



Inserting new single node: 3

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Nothing)} ---> to: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 3
looking for ident: 3

SingleNode without Cycle found: 3



Inserting new single node: 4

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Nothing)} ---> to: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

New omega states found: 9

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

Cannot find other nodes to merge

AlreadyVisitedNode: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Inserting new single node: 5

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 5
looking for ident: 5

SingleNode without Cycle found: 5



Inserting new single node: 6

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

New omega states found: 9


Inserting new single node: 7

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

New omega states found: 3

looking for ident: 7

looking for ident: 6

looking for ident: 4



looking for ident: 7

looking for ident: 6

looking for ident: 4



looking for ident: 7

looking for ident: 6

looking for ident: 4



creating component for node: 7
looking for ident: 7

SingleNode without Cycle found: 7




Inserting new single node: 8

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 8
looking for ident: 8

SingleNode without Cycle found: 8




Inserting new single node: 9

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 9
looking for ident: 9

SingleNode without Cycle found: 9




Inserting new single node: 10

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

New omega states found: 3

looking for ident: 10

looking for ident: 6

looking for ident: 4



looking for ident: 10

looking for ident: 6

looking for ident: 4



looking for ident: 10

looking for ident: 6

looking for ident: 4



creating component for node: 10
looking for ident: 10

SingleNode without Cycle found: 10




Inserting new single node: 11

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 11
looking for ident: 11

SingleNode without Cycle found: 11




Inserting new single node: 12

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 12
looking for ident: 12

SingleNode without Cycle found: 12




Inserting new single node: 13

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

New omega states found: 3

looking for ident: 13

looking for ident: 6

looking for ident: 4



looking for ident: 13

looking for ident: 6

looking for ident: 4



looking for ident: 13

looking for ident: 6

looking for ident: 4



creating component for node: 13
looking for ident: 13

SingleNode without Cycle found: 13




Inserting new single node: 14

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 14
looking for ident: 14

SingleNode without Cycle found: 14




Inserting new single node: 15

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 15
looking for ident: 15

SingleNode without Cycle found: 15



creating component for node: 6
looking for ident: 6

SingleNode without Cycle found: 6



Inserting new single node: 16

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 16
looking for ident: 16

SingleNode without Cycle found: 16



Inserting new single node: 17

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

New omega states found: 3

looking for ident: 17

looking for ident: 4



looking for ident: 17

looking for ident: 4



looking for ident: 17

looking for ident: 4



creating component for node: 17
looking for ident: 17

SingleNode without Cycle found: 17



Inserting new single node: 18

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 18
looking for ident: 18

SingleNode without Cycle found: 18



Inserting new single node: 19

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 19
looking for ident: 19

SingleNode without Cycle found: 19



Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 10, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
Inserting new single node: 20

InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 10, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 10, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 20
looking for ident: 20

SingleNode without Cycle found: 20



Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 11, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
Inserting new single node: 21

InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 11, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 11, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 21
looking for ident: 21

SingleNode without Cycle found: 21



Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
Inserting new single node: 22

InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

New omega states found: 9

Inserting new single node: 23

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 23
looking for ident: 23

SingleNode without Cycle found: 23



Inserting new single node: 24

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 24
looking for ident: 24

SingleNode without Cycle found: 24



Inserting new single node: 25

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

New omega states found: 9

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

recursive call to updateSCC'

call to updateSCC

recursive call to updateSCC'

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

InsertInternal: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 10, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
Inserting new single node: 26

InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 10, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 10, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 26
looking for ident: 26

SingleNode without Cycle found: 26



Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 11, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
Inserting new single node: 27

InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 11, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 11, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 27
looking for ident: 27

SingleNode without Cycle found: 27



Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
Inserting new single node: 28

InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

New omega states found: 9

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

recursive call to updateSCC'

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Inserting new single node: 29

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 29
looking for ident: 29

SingleNode without Cycle found: 29



Inserting new single node: 30

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

New omega states found: 9


Inserting new single node: 31

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

New omega states found: 3

looking for ident: 31

looking for ident: 30

looking for ident: 28



looking for ident: 31

looking for ident: 30

looking for ident: 28



looking for ident: 31

looking for ident: 30

looking for ident: 28



creating component for node: 31
looking for ident: 31

SingleNode without Cycle found: 31




Inserting new single node: 32

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 32
looking for ident: 32

SingleNode without Cycle found: 32




Inserting new single node: 33

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 33
looking for ident: 33

SingleNode without Cycle found: 33




Inserting new single node: 34

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

New omega states found: 3

looking for ident: 34

looking for ident: 30

looking for ident: 28



looking for ident: 34

looking for ident: 30

looking for ident: 28



looking for ident: 34

looking for ident: 30

looking for ident: 28



creating component for node: 34
looking for ident: 34

SingleNode without Cycle found: 34




Inserting new single node: 35

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 35
looking for ident: 35

SingleNode without Cycle found: 35




Inserting new single node: 36

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 36
looking for ident: 36

SingleNode without Cycle found: 36




Inserting new single node: 37

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

New omega states found: 3

looking for ident: 37

looking for ident: 30

looking for ident: 28



looking for ident: 37

looking for ident: 30

looking for ident: 28



looking for ident: 37

looking for ident: 30

looking for ident: 28



creating component for node: 37
looking for ident: 37

SingleNode without Cycle found: 37




Inserting new single node: 38

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 38
looking for ident: 38

SingleNode without Cycle found: 38




Inserting new single node: 39

InsertInternal: from: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 39
looking for ident: 39

SingleNode without Cycle found: 39



creating component for node: 30
looking for ident: 30

SingleNode without Cycle found: 30



Inserting new single node: 40

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 40
looking for ident: 40

SingleNode without Cycle found: 40



Inserting new single node: 41

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

New omega states found: 3

looking for ident: 41

looking for ident: 28



looking for ident: 41

looking for ident: 28



looking for ident: 41

looking for ident: 28



creating component for node: 41
looking for ident: 41

SingleNode without Cycle found: 41



Inserting new single node: 42

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 42
looking for ident: 42

SingleNode without Cycle found: 42



Inserting new single node: 43

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 43
looking for ident: 43

SingleNode without Cycle found: 43



Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 10, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 10, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 10, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 11, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 11, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 11, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 13, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
Inserting new single node: 44

InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 13, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 13, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 44
looking for ident: 44

SingleNode without Cycle found: 44



Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
Inserting new single node: 45

InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

New omega states found: 9


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

creating component for node: 45
looking for ident: 45

SingleNode without Cycle found: 45



Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 15, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
Inserting new single node: 46

InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 15, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 15, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 46
looking for ident: 46

SingleNode without Cycle found: 46



Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
Inserting new single node: 47

InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

New omega states found: 3

looking for ident: 47

looking for ident: 28



looking for ident: 47

looking for ident: 28



looking for ident: 47

looking for ident: 28



creating component for node: 47
looking for ident: 47

SingleNode without Cycle found: 47



Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
Inserting new single node: 48

InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 48
looking for ident: 48

SingleNode without Cycle found: 48



Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
Inserting new single node: 49

InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

newReachOmegawithNode: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Call to visit node

creating component for node: 49
looking for ident: 49

SingleNode without Cycle found: 49



Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

creating component for node: 28
Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 13, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 13, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 13, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 15, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 15, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 15, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}})
s = StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))} ---> to: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

creating component for node: 25
InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

InsertInternal: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}))

Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 10, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 10, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 10, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 11, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 11, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 11, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 13, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
Inserting new single node: 50

InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 13, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 13, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 50
looking for ident: 50

SingleNode without Cycle found: 50



Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
Inserting new single node: 51

InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

New omega states found: 9


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 2, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 3, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 4, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 5, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 6, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 7, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 8, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))


InsertInternal: from: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 9, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]4,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

creating component for node: 51
looking for ident: 51

SingleNode without Cycle found: 51



Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 15, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
Inserting new single node: 52

InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 15, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 15, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 52
looking for ident: 52

SingleNode without Cycle found: 52



Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
Inserting new single node: 53

InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

New omega states found: 3

looking for ident: 53

looking for ident: 28

looking for ident: 25




looking for ident: 53

looking for ident: 28

looking for ident: 25




looking for ident: 53

looking for ident: 28

looking for ident: 25




creating component for node: 53
looking for ident: 53

SingleNode without Cycle found: 53



Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
Inserting new single node: 54

InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 54
looking for ident: 54

SingleNode without Cycle found: 54



Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
Inserting new single node: 55

InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

newReachOmegawithNode: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Call to visit node

creating component for node: 55
looking for ident: 55

SingleNode without Cycle found: 55



Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 12, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

creating component for node: 22
Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 13, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 13, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 13, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 14, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 15, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 15, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 15, getState = 
{ C: EncodedAtom [3]4
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 16, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 17, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: False
, X=: True
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

Push (summary): q = StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}
g = Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}})
s = StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}}
InsertSummary: from: (StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))} ---> to: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

call to updateSCC

AlreadyVisitedNode: (StateId {getId = 18, getState = 
{ C: EncodedAtom [3]1
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: True
}},Just (EncodedAtom [3]2,StateId {getId = 1, getState = 
{ C: EncodedAtom [3]2
, P: EncodedAtom [3]0
, S: EncodedAtom [3]0
, XL: True
, X=: False
, XR: False
}}))

creating component for node: 4
looking for ident: 4

looking for ident: 22

looking for ident: 25

looking for ident: 28

Cycle found: 564222528



looking for ident: 4

looking for ident: 6

looking for ident: 7

looking for ident: 22

looking for ident: 25

looking for ident: 28

looking for ident: 30

looking for ident: 31

[91;1mFAIL[m[91;1m
[m[31;22m        Exception: Maybe.fromJust: Nothing
        CallStack (from HasCallStack):
          error, called at libraries/base/Data/Maybe.hs:148:21 in base:Data.Maybe
          fromJust, called at src/Pomc/SCCAlgorithm.hs:204:66 in pomc-0.1.0.0-GpRZHhL7kihMMbv3EmWWD:Pomc.SCCAlgorithm
[m[?25h
[91;1m1 out of 1 tests failed[m[91;1m (0.10s)
[m[0m[0m
[0mpomc> Test suite test-pomc failed[0m
[0mCompleted 2 action(s).[0m
[0mTest suite failure for package pomc-0.1.0.0
    test-pomc:  exited with: ExitFailure 1
Logs printed to console
[0m
]0;francescopont@DESKTOP-6MBR7RP: /mnt/c/Users/ponti/Github/POMC[01;32mfrancescopont@DESKTOP-6MBR7RP[00m:[01;34m/mnt/c/Users/ponti/Github/POMC[00m$ ei[Kxit
exit

Script done on 2021-04-01 17:08:55+02:00 [COMMAND_EXIT_CODE="1"]
