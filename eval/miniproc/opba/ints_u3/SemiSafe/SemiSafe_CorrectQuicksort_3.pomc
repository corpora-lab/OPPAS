/*  Corresponding Procedure in Java syntax:

	main(){
		try{
			qs();
		}catch(){
			parseList();
			// null elements removed
			qs();
		}
	}

	//same procedure as in Correct Quicksort
	qs(){
		... 
		accessValues();
		...
	}

	parseList(){
		hasParsed = true;
	}

	accessValues(){
		if(*){
			throw();
		} else{
			\\ readValues
		}
	}
*/

formulas = 	F (ret And main),
			XNu (ret And main), 
			F ( G (okay)),
			XNu (okay), 
			G ((call And main) --> ~ (PNu exc Or XNu exc)), 
			G ((call And qs) --> ~ (PNu exc Or XNu exc)), 
			((PNu exc) Or (XNu exc)) --> ((PNu (exc And hasParsed)) Or (XNu (exc And hasParsed))), 
			((PNu exc) Or (XNu exc)) --> ((PNu (exc And okay)) Or (XNu (exc And okay))), 
			G ( (call And accessValues) --> (hasParsed) Or (T Sd han )), 
			(F (ret And main)) Or (XNu (exc And hasParsed)), 
			(XNu (ret And main)) Or (XNu (exc And hasParsed)), 
			(F ( G (okay))) Or (XNu (exc And hasParsed)), 
			(XNu (okay)) Or (XNu (exc And hasParsed)), 
			(F (ret And main And (okay))) Or (XNu (exc And hasParsed));
			

program:
bool  okay, hasParsed;
s3 left, right, lo, hi, eq;
u3 piv, swapLeft, swapRight, tmp;
u3[3] a;

main() {
	left = 0s3;
	right = 2s3;
	a[0s3] = *;
	a[1s3] = *;
	a[2s3] = *;
	hasParsed = false;
	try {
	 	qs();
	} catch {
		hasParsed = true;
		qs();
	}
}

qs() {
	if (left >= right) {
	} else {
		piv = a[right]; 
		eq = left;
		lo = eq;
		hi = right;
		while (lo <= hi) { 
			qsif();
		}

		// recursive calls
		if (lo == 0s3 && right == 1s3){
			qsRec0();
		} else {
			if (lo == 0s3 && right == 2s3){
				qsRec1();
			} else {
				if (lo == 1s3 && right == 2s3){
					qsRec2();
				} else {
					qsRec3();
				}
			} 
		}
	}
}

qsif() { 
	if (a[hi] > piv){
		hi = hi - 1s3; 
	} else {
		swapLeft = lo;
		swapRight = hi;
		swapElements();
		if (a[lo] < piv){
			swapLeft = lo;
			swapRight = eq;
			swapElements();
		} else {}
		lo = lo + 1s3;
	}
}

swapElements() {
	accessValues();
	tmp = a[swapLeft];
	a[swapLeft] = a[swapRight];
	a[swapRight] = tmp;
	okay = a[0s3] <= a[1s3] && a[1s3] <= a[2s3];
}

accessValues(){
	if (*){
		throw;
	} else {}
}

//recursive cases depending on the value of lo and right for a three-elements array
qsRec0() {
	left = 0s3;
	right = eq - 1s3;
	qs();
	left = 0s3; 
	right = 1s3;
	qs();
}

qsRec1() {
	left = 0s3;
	right = eq - 1s3;
	qs();
	left = 0s3; 
	right = 2s3;
	qs();
}

qsRec2() {
	left = 0s3;
	right = eq - 1s3;
	qs();
	left = 1s3; 
	right = 2s3;
	qs();
}

qsRec3() {
	left = 0s3;
	right = eq - 1s3;
	qs();
	//abort second recursive call, it involves at most one element
	//qs();
}