/*  Corresponding procedure in C syntax:

	void quicksort (int left,int right)
	{
		int lo,hi,piv;
		if (left >= right) return;
		piv = a[right]; lo = left; hi = right;
		while (lo <= hi) {
			if (a[hi] > piv) {
				hi--;
			} else {
				swap a[lo],a[hi];
				lo++;
			}
		}
		quicksort(left,hi);
		quicksort(lo,right);
	}	

	Ref: Schwoon, Stefan. Model-checking pushdown systems. Diss. Technische Universität München, 2002. 
	We consider an array of 2 elements.
*/

formulas = 	F (ret And main),
			XNu (ret And main),
			F ( G (okay)),
			XNu (okay),
			F (ret And main And (okay)),
			XNu (ret And main And (okay));


program:
bool  okay;
s4 tmp, left, right, lo, hi, piv, swapLeft, swapRight;
s4[2] a;


main() {
	left = 0s4;
	right = 1s4;
	a[0s4] = *;
	a[1s4] = *;
	qs();
}

qs() {
	if (left >= right) {
	} else {
		piv = a[right]; 
		lo = left;
		hi = right;
		while (lo <= hi) { 
			if (a[hi] > piv){
				hi = hi - 1s4; 
			} else {
				swapLeft = lo;
				swapRight = hi;
				swapElements();
				lo = lo + 1s4;
			}
		}

		// recursive calls
		if (lo == 0s4 && right == 1s4){
			qsRec0();
		} else {
			qsRec1();
		}
	}
}

swapElements() {
	tmp = a[swapLeft];
	a[swapLeft] = a[swapRight];
	a[swapRight] = tmp;
	okay = a[0s4] <= a[1s4];
}

//recursive cases depending on the value of lo and right for a two-elements array
qsRec0() {
	right = hi;
	qs();
	left = 0s4; 
	right = 1s4;
	qs();
}

qsRec1() {
	right = hi;
	qs();
	//abort second recursive call, it involves at most one element
	//qs();
}

