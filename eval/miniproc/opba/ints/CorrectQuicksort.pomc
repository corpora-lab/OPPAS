/*  Corresponding procedure in C syntax:

	void quicksort (int left,int right)
	{
		int lo,eq,hi,piv;
		if (left >= right) return;
		piv = a[right]; lo = eq = left; hi = right;
		while (lo <= hi) {
			if (a[hi] > piv) {
				hi--;
			} else {
				swap a[lo],a[hi];
				if (a[lo] < piv) {
					swap a[lo],a[eq];
					eq++;
				}
				lo++;
			}
		}
		quicksort(left,eq-1);
		quicksort(lo,right);
	}

	Ref: Schwoon, Stefan. Model-checking pushdown systems. Diss. Technische Universität München, 2002. 
*/

formulas = 	F (ret And main),
			XNu (ret And main),
			F ( G (okay)),
			XNu (okay),
			F (ret And main And (okay)),
			XNu (ret And main And (okay));
			

program:
bool leftGEQright, loLThi, loEQhi, loEQleft, hiEQright, eqEQlo, eqEQleft, okay;
u8[2] arr;
u8 tmp;


main() {
	leftGEQright = false;
	qs2();
	okay = arr[0u8] <= arr[1u8];
}

qs2() {
	if (leftGEQright) {
	} else {
		loEQhi = false;
		loLThi = true;
		loEQleft = true;
		hiEQright = true;
		eqEQlo = true;
		eqEQleft = true;
		firstIteration2();
		while (loLThi || loEQhi) { 
			qsif2();
		}

		//recursive calls
		if (loEQleft){ 
			leftGEQright = true;
			qs2();
			leftGEQright = false;
			qs2();
		} else { 
			if (hiEQright && eqEQlo) { 
				leftGEQright = false;
				qs2();
				leftGEQright = true;
				qs2();
			} else {
				if (hiEQright && eqEQleft) { 
					leftGEQright = true;
					qs2();
					leftGEQright = true;
					qs2();
				} else {
					if (hiEQright) { 
						leftGEQright = true;
						qs2();
						leftGEQright = true;
						qs2();
					} else {
						if (eqEQleft) { 
							leftGEQright = true;
							qs2();
							leftGEQright = true;
							qs2();
						} else {
							if (eqEQlo) { 
								leftGEQright = true;
								qs2();
								leftGEQright = true;
								qs2();
							} else {}
						} 
					}
				}				
			}
		}
	}
}

qsif2() { 
	// this if-condition is due to swapping of firstIteration
	if (arr[0u8] < arr[1u8]) {
		shiftloLEQhi2();
		hiEQright = false;
	} else {
		if (! loEQhi){
			swapElements();
		} else {}
		
		if (arr[0u8] > arr[1u8]) {
			if (! eqEQlo){
				swapElements();
			} else {}
			eqEQleft = false;
		} else {
			eqEQlo = false;
		}

		shiftloLEQhi2();
		loEQleft = false;		
	}
}

firstIteration2() {
	swapElements();
	//lo++;
	eqEQlo = false; 
	shiftloLEQhi2();
	loEQleft = false;
}

shiftloLEQhi2() {
	if (loEQhi) {
		loEQhi = false;
		loLThi = false;					
	} else {
		loEQhi = true;
		loLThi = false;
	}
}

swapElements() {
	tmp = arr[0u8];
	arr[0u8] = arr[1u8];
	arr[1u8] = tmp;
}

rant(u8 var){
	var = 1u8;
}